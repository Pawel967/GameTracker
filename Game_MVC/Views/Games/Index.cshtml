@model PaginatedResponse<Game_MVC.Models.Game.GameViewModel>
@{
    ViewData["Title"] = "Games";
    var genres = (IEnumerable<Game_MVC.Models.Game.GenreViewModel>)ViewBag.Genres;
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Games</h1>

        <div class="d-flex align-items-center gap-2">
            @if (!string.IsNullOrEmpty(ViewBag.SearchQuery) || !string.IsNullOrEmpty(ViewBag.CurrentGenre) || !string.IsNullOrEmpty(ViewBag.CurrentDeveloper))
            {
                <span class="text-muted me-2">Current filters:</span>
                @if (!string.IsNullOrEmpty(ViewBag.SearchQuery))
                {
                    <span class="badge bg-primary">
                        Search: @ViewBag.SearchQuery
                        <a href="@Url.Action("Index", new { genre = ViewBag.CurrentGenre, developer = ViewBag.CurrentDeveloper })"
                           class="text-white text-decoration-none ms-2">
                            <i class="fas fa-times"></i>
                        </a>
                    </span>
                }
                @if (!string.IsNullOrEmpty(ViewBag.CurrentGenre))
                {
                    <span class="badge bg-primary">
                        Genre: @ViewBag.CurrentGenre
                        <a href="@Url.Action("Index", new { query = ViewBag.SearchQuery, developer = ViewBag.CurrentDeveloper })"
                           class="text-white text-decoration-none ms-2">
                            <i class="fas fa-times"></i>
                        </a>
                    </span>
                }
                @if (!string.IsNullOrEmpty(ViewBag.CurrentDeveloper))
                {
                    <span class="badge bg-primary">
                        Developer: @ViewBag.CurrentDeveloper
                        <a href="@Url.Action("Index", new { query = ViewBag.SearchQuery, genre = ViewBag.CurrentGenre })"
                           class="text-white text-decoration-none ms-2">
                            <i class="fas fa-times"></i>
                        </a>
                    </span>
                }
            }
        </div>

        <form class="d-flex" method="get">
            <input type="text" name="query" class="form-control me-2" placeholder="Search games..." value="@ViewBag.SearchQuery">
            <button type="submit" class="btn btn-primary">Search</button>
        </form>
    </div>

    <div class="row">
        <div class="col-md-3 mb-4">
            <div class="card shadow-custom">
                <div class="card-body">
                    <h5 class="card-title">Genres</h5>
                    <div class="list-group list-group-flush">
                        <a href="@Url.Action("Index")" class="list-group-item list-group-item-action @(ViewBag.CurrentGenre == null ? "active" : "")">
                            All Genres
                        </a>
                        @foreach (var genre in genres)
                        {
                            <a href="@Url.Action("Index", new { genre = genre.Name })"
                               class="list-group-item list-group-item-action @(ViewBag.CurrentGenre == genre.Name ? "active" : "")">
                                @genre.Name
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <div class="row g-4">
                @foreach (var game in Model.Items)
                {
                    <div class="col-md-6 col-lg-4">
                        <div class="card h-100 shadow-custom">
                            @if (!string.IsNullOrEmpty(game.CoverUrl))
                            {
                                <img src="@game.CoverUrl" class="card-img-top" alt="@game.Name">
                            }
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@game.Name</h5>
                                <div class="card-text text-muted small mb-2">
                                    <div class="d-flex flex-wrap gap-2 mb-2">
                                        @* Changed from mb-1 to mb-2 and added gap-2 *@
                                        @foreach (var genre in game.Genres)
                                        {
                                            <a href="@Url.Action("Index", new { genre })" class="text-decoration-none">
                                                @* Removed me-1 class *@
                                                <span class="badge bg-primary-subtle text-primary">@genre</span>
                                            </a>
                                        }
                                    </div>
                                    @if (!string.IsNullOrEmpty(game.Developer))
                                    {
                                        <a href="@Url.Action("Index", new { developer = game.Developer })" class="text-decoration-none">
                                            <span class="badge bg-secondary-subtle text-secondary">
                                                <i class="fas fa-laptop-code me-1"></i>@game.Developer
                                            </span>
                                        </a>
                                    }
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="badge bg-primary">
                                        <i class="fas fa-star me-1"></i>
                                        @((game.Rating / 10).ToString("F1"))
                                    </span>
                                    @if (game.ReleaseDate.HasValue)
                                    {
                                        <small class="text-muted">
                                            @game.ReleaseDate.Value.Year
                                        </small>
                                    }
                                </div>
                                <p class="card-text small">@(game.Summary?.Length > 75 ? game.Summary[..75] + "..." : game.Summary)</p>
                                <div class="mt-auto">
                                    <a asp-action="Details" asp-route-id="@game.Id" class="btn btn-primary w-100">
                                        View Details
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation" class="mt-4 mb-4">
                    <ul class="pagination justify-content-center">
                        @* Previous Page Button *@
                        <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                            <a class="page-link"
                               asp-action="Index"
                               asp-route-page="@(Model.PageNumber - 1)"
                               asp-route-genre="@ViewBag.CurrentGenre"
                               asp-route-query="@ViewBag.SearchQuery"
                               asp-route-developer="@ViewBag.CurrentDeveloper">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>

                        @{
                            const int maxVisiblePages = 5;
                            var startPage = Math.Max(1, Model.PageNumber - maxVisiblePages / 2);
                            var endPage = Math.Min(Model.TotalPages, startPage + maxVisiblePages - 1);

                            if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-page="1"
                                       asp-route-genre="@ViewBag.CurrentGenre"
                                       asp-route-query="@ViewBag.SearchQuery"
                                       asp-route-developer="@ViewBag.CurrentDeveloper">1</a>
                                </li>
                                if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                    <a class="page-link"
                                       asp-action="Index"
                                       asp-route-page="@i"
                                       asp-route-genre="@ViewBag.CurrentGenre"
                                       asp-route-query="@ViewBag.SearchQuery"
                                       asp-route-developer="@ViewBag.CurrentDeveloper">@i</a>
                                </li>
                            }

                            if (endPage < Model.TotalPages)
                            {
                                if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link"
                                       asp-action="Index"
                                       asp-route-page="@Model.TotalPages"
                                       asp-route-genre="@ViewBag.CurrentGenre"
                                       asp-route-query="@ViewBag.SearchQuery"
                                       asp-route-developer="@ViewBag.CurrentDeveloper">@Model.TotalPages</a>
                                </li>
                            }
                        }

                        @* Next Page Button *@
                        <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                            <a class="page-link"
                               asp-action="Index"
                               asp-route-page="@(Model.PageNumber + 1)"
                               asp-route-genre="@ViewBag.CurrentGenre"
                               asp-route-query="@ViewBag.SearchQuery"
                               asp-route-developer="@ViewBag.CurrentDeveloper">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>